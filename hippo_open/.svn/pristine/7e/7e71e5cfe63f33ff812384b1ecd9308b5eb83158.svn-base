public class TransportFactory {
	
	private static final Logger log = LoggerFactory.getLogger(TransportFactory.class);
	
	private static final Object lock = new Object();
	private static Map<String, TransportSender> transportSenderMap = new HashMap<String, TransportSender>();
	private static Map<String, TransportConsumer> transportConsumerMap = new HashMap<String, TransportConsumer>();
	
    static {
        ServiceLoader<TransportSender> transportSenders = ServiceLoader.load(TransportSender.class);
        for (TransportSender transportSender : transportSenders) {
            transportSenderMap.put(transportSender.getName(), transportSender);
        }

        ServiceLoader<TransportConsumer> transportConsumers = ServiceLoader.load(TransportConsumer.class);
        for (TransportConsumer transportConsumer : transportConsumers) {
            transportConsumerMap.put(transportConsumer.getName(), transportConsumer);
        }
    }
    
    public TransportFactory() {

    }

	public TransportSender getTrasportSender(PingaMqSenderContext senderContext)
			throws TransportException {
		ConsoleConnector connector = senderContext.getConnector();
		ClientMachine machine = senderContext.getMachine();
		TransportSender sendTransportSender = connector
				.getTransportSender(machine);
		if (sendTransportSender != null) {
			return sendTransportSender;
		}

		synchronized (lock) {
			if (connector.getTransportSender(machine) != null) {
				return connector.getTransportSender(machine);
			}
			String type = "activemq";
			if (!StringUtils.isEmpty(machine.getMachineType())) {
				type = machine.getMachineType();
			}
			TransportSender transportSenderFactory = transportSenderMap
					.get(type);
			if (transportSenderFactory == null) {
				throw new TransportException(
						"can't find the sender impl class of type[" + type
								+ "]");
			}

			sendTransportSender = transportSenderFactory
					.createTransportSender(senderContext);

			connector.addTransportSender(machine, sendTransportSender);
			if (log.isInfoEnabled()) {
				log.info("create senderTransport for the machine:" + machine);
			}
			return sendTransportSender;
		}
	}

	public TransportConsumer getTransportConsumer(ConsoleConnector connector,
			ClientMachine machine, ConnectionParam connectionParam, String destinationType,
			PingaMqWorker worker, List<Filter> filterList,ThreadPoolExecutor executor)
			throws TransportException {

		String type = "activemq";
		if (!StringUtils.isEmpty(machine.getMachineType())) {
			type = machine.getMachineType();
		}

		TransportConsumer transportConsumerFactory = transportConsumerMap
				.get(type);
		if (transportConsumerFactory == null) {
			throw new TransportException(
					"can't find the consumer impl class of type[" + type + "]");
		}

		return transportConsumerFactory.createTransportConsumer(connector,
				machine, connectionParam, destinationType, worker, filterList, executor);
	}
    
	
}